#!/bin/bash

# script initialization area
another_k8s_yes="N"

k8s_cluster_setup ()  {
	
# Prompt container cluster name, !!  
read -p "Enter new GKE cluster name: " IN_GKE_NAME

if [ -z "$IN_GKE_NAME" ]; then
   	IN_GKE_NAME="k8sdemo"
fi

read -p "Enter primary zone: " ZONE_PRIME
read -p "Enter additional zone: " ZONE_SECONDARY

if [ -z "$ZONE_SECONDARY" ]; then
   	echo "This would be single zone GKE cluster spin-up"
fi

#if [ -z "$(gcloud compute regions list --filter=name=$IN_SUBNET_REGION --format='value(name)')" ]; then
#    echo "non-existing region specified "
#fi

if [ -z "$(gcloud compute zones list --filter=name=$ZONE_PRIME --format='value(name)')" ]; then
    echo "$ZONE_PRIME is non-existing region specified " 
    return
fi

if [ -z "$(gcloud compute zones list --filter=name=$ZONE_SECONDARY --format='value(name)')" ]; then
    echo "$ZONE_SECONDARY is non-existing region specified " 
    return
fi

echo "Entered container cluster is: " $IN_GKE_NAME

if [ "$another_k8s_yes" == "Y" ]; then
    T_SUBNETS=$SUBNETS_2
else  
    T_SUBNETS=$SUBNETS
fi

echo "***************"
echo "Subetwork is: "                   $T_SUBNETS
echo "Primary zone is: "                $ZONE_PRIME
echo "Secondary zone is: "              $ZONE_SECONDARY
echo "***************"

gcloud container clusters create $IN_GKE_NAME  \
         --zone               $ZONE_PRIME      \
         --additional-zones   $ZONE_SECONDARY  \
         --cluster-ipv4-cidr  10.1.0.0/16      \
         --network            $IN_NETWORK      \
         --subnetwork         $T_SUBNETS       \
         --max-nodes-per-pool  100             \
         --num-nodes 2                         \
         --node-labels=purpose=demo,temp=yes   \
         --disk-size 110                       \
         --enable-cloud-endpoints              \
         --enable-cloud-logging                \
         --enable-cloud-monitoring             \
         --username admin                      \
         --password admin                      \
         --scopes "cloud-source-repos,cloud-platform,service-control,sql,storage-full,https://www.googleapis.com/auth/ndev.clouddns.readwrite"  
           
           
sleep 25;

gcloud container node-pools create nodepool-$IN_GKE_NAME-highcpu --cluster $IN_GKE_NAME   \
         --zone  $ZONE_PRIME                    \
         --image-type  GCI                      \
         --disk-size 100                        \
         --enable-cloud-endpoints               \
         --num-nodes 2                          \
         --scopes "cloud-source-repos,cloud-platform,service-control,sql,storage-full,https://www.googleapis.com/auth/ndev.clouddns.readwrite"

sleep 20;

gcloud alpha container clusters update $IN_GKE_NAME --enable-autoscaling \
         --min-nodes 1 --max-nodes 4           \
         --zone $ZONE_PRIME                    \
         --node-pool=nodepool-$IN_GKE_NAME-highcpu 
         
sleep 2;
}

# Entering Kubernetes 

echo "Welcome to Kubernetes demo" 
echo "setting up Kubernetes cluster with additional node pool......"

# invoke cluster set-up function 
k8s_cluster_setup
 
echo " "
echo " "
echo "Want to set-up another Kubernetes cluster?"
echo " "
read -p "Press Y to proceed: " another_k8s_yes

if [ $another_k8s_yes != "Y" ]; then
   echo "Quiting kubernetes setup script......"
   return
else
   echo "Invoking Kubernetes cluster set-up steps......"
   k8s_cluster_setup
   echo "done setting up cluster"
fi
